######################################################################
#
# Example configuration file for Oligarchical
#
# Obviously, the comment character is "#" and everything after the #
# character is stripped and ignored.
#
# The configuration file is comprised of zero or more blocks describing
# a process to monitor
#
##################################################
# startblock
# name [-x] <processname>
# pid <processid> ...
# startifmissinginitially yes/no
# exitifmissinginitially yes/no
# startifmissinglater yes/no
# exitifmissinglater yes/no
# period seconds
# periodcmd <cmd args>   ## %p gets substituted with space seperated process list
# periodcmdiftrue <cmd args>
# periodcmdiffalse <cmd args>
# command <cmd args>     ## Must self-background
# endblock
##################################################
#
# startblock
#	Starts a block describing a process to monitor
#
# name
#	Describes the name of the program we are monitoring.  The program
#	will looked for in the process table.  If the -x flag is given
#	as an argument, then shell scripts names will be looked up as well.
#	(it is unclear how well this works, especially with perl scripts)
#
# pid
#	Instead of providing a process name to look up, give a specific
#	list of process IDs to monitor.  For automatic monitoring, the
#	system will claim to have failed when **ALL** pids have died.
#	WARNING: If new commands are started because the pids listed
#	here have died, the pid list here will NOT be updated.  As such
#	generally you do not want to mix pids and starting new commands.
#
# startifmissinginitially
#	During the initial pass, a manditory kill -0 is sent to all
#	processes as given by the pid or generated from the name
#	parameter.  If no processes are detected running, then
#	if this parameter is present and set to yes, then a new
#	process will be started using command.
#
# exitifmissinginitially
#	Instead (or in addition to) performing the actions described above,
#	if the processes are missing as part of the mandatory first check
#	and this variable is set to yes, then this block is deleted and no
#	longer considered.  If all blocks go away, the program exits.
#
# startifmissinglater
#	If there is no periodcmd (described below) or no processes
#	were found, then kill -0 is sent to all available processes.
#	If there are no remaining alive processes, and this variable
#	is set to yes, a new command will be started.
#
# exitifmissinglater
#	Instead (or in addition to) performing the actions described above,
#	if the processes are missing as part of the second non-periodcmd checks
#	and this variable is set to yes, then this block is deleted and no
#	longer considered.  If all blocks go away, the program exits.
#
# period
#	Define how often the process is monitored.  Default is 60 seconds
#	if no period is specified
#
# periodcmd
#	A command to run to monitor the process.  If no command is specified,
#	then the system will use "kill -0" to verify that the PIDs are alive.
#	A "%p" present in the command or its arguments will be substituted
#	with the space separated list of process IDs we are aware of.
#
# periodcmdiftrue
#	If periodcmd returns 0, and this variable is present, run this
#	command.  As previosly, %p will be substituted with the process list.
#	Note if *this* command fails, this monitoring block is deleted.
#
# periodcmdiffalse
#	If periodcmd returns non-zero, and this variable is present, run this
#	command.  As previosly, %p will be substituted with the process list.
#	Note if *this* command fails, this monitoring block is deleted.
#
# command
#	The command and its arguments to run if startifmissing allows
#	such execution.  REMEMBER TO PLACE COMMAND IN BACKGROUND!!!
#
# endblock
#	signal the system that the current block is closed.
#
#
# Note there are no inheritance or default values.
######################################################################

# This block will print Hello and sleep for 15 seconds.  It will monitor for the 'sleep' process
# every 5 seconds.  A sleep will be created initially and restarted as needed.
startblock
name sleep
startifmissinginitially yes
startifmissinglater yes
period 5
command echo Hello; sleep 15 &
endblock

# This block will monitor the init process, but do nothing if it is not present
# Very useful.
startblock
name init
period 2
endblock

# This block will be deleted if the program is not found the second time
startblock
name notthere
period 1
exitifmissinglater yes
endblock

# This block will be deleted if the program is not found the first time
startblock
name notthere2
period 1
exitifmissinginitially yes
endblock

# Here we will start a dd and monitor the resulting file once per second, terminating the program
# if it grows over 100K
startblock
name dd
command dd if=/dev/zero bs=1c of=/tmp/bigfile &
period 1
periodcmd ls -l /tmp/bigfile; test `ls -l /tmp/bigfile | awk '{print $5;}'` -lt 5000000
periodcmdiftrue echo File not big enough yet
periodcmdiffalse kill -TERM %p; ls -l /tmp/bigfile; rm /tmp/bigfile; false
startifmissinginitially yes
endblock

# And for Oliver, here is a command which will terminate if it grows beyond a certain size
startblock
name rev
command rev < /dev/zero &
period 1
periodcmd test `ps hl %p | awk '{ print $7; }' | head -1` -lt 300000
periodcmdiftrue echo Process not big enough yet
periodcmdiffalse echo Process big enough at `ps hl %p | awk '{ print $7; }'`KB; kill -TERM %p
startifmissinginitially yes
exitifmissinglater yes
endblock
